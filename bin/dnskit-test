#!/bin/bash
# dnskit-test - Test Cloudflare API connection

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "${SCRIPT_DIR}/../lib/common.sh"

show_usage() {
  cat << EOF
Usage: dnskit test [options]

Test your Cloudflare API credentials and connection.

Options:
  -h, --help  Show this help message

Examples:
  dnskit test
EOF
}

main() {
  # Parse arguments
  while [[ $# -gt 0 ]]; do
    case $1 in
      -h|--help)
        show_usage
        exit 0
        ;;
      *)
        log_error "Unknown option: $1"
        show_usage
        exit 1
        ;;
    esac
  done

  check_credentials

  log_info "Testing Cloudflare API connection..."
  echo ""

  # Check if jq is installed
  if ! command -v jq &> /dev/null; then
    log_error "jq is required. Please install it first."
    exit 1
  fi

  # Read credentials
  log_info "Reading credentials from: $CREDS_FILE"

  local api_type=$(jq -r '.cloudflare.TYPE' "$CREDS_FILE" 2>/dev/null)
  local api_token=$(jq -r '.cloudflare.apitoken // .cloudflare.apikey // empty' "$CREDS_FILE" 2>/dev/null)
  local api_email=$(jq -r '.cloudflare.email // empty' "$CREDS_FILE" 2>/dev/null)

  echo "  API Type: $api_type"
  echo "  Token/Key: ${api_token:0:10}..." # Show only first 10 chars
  if [ -n "$api_email" ]; then
    echo "  Email: $api_email"
  fi
  echo ""

  # Test API call
  log_info "Testing API connection..."

  local response
  if [ "$api_type" == "CLOUDFLAREAPI" ] && [ -n "$api_token" ]; then
    # Using API Token - try zones endpoint instead of verify
    log_info "Using API Token authentication"
    response=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones?per_page=5" \
      -H "Authorization: Bearer $api_token" \
      -H "Content-Type: application/json")
  elif [ -n "$api_email" ] && [ -n "$api_token" ]; then
    # Using API Key (legacy)
    log_info "Using API Key authentication (legacy)"
    response=$(curl -s -X GET "https://api.cloudflare.com/v4/user" \
      -H "X-Auth-Email: $api_email" \
      -H "X-Auth-Key: $api_token" \
      -H "Content-Type: application/json")
  else
    log_error "Invalid credentials format in $CREDS_FILE"
    exit 1
  fi

  echo ""
  echo "API Response:"
  echo "$response" | jq '.'
  echo ""

  # Check if successful
  local success=$(echo "$response" | jq -r '.success')
  if [ "$success" == "true" ]; then
    log_success "API connection successful!"
    echo ""
    log_info "Your credentials are working correctly."
  else
    log_error "API connection failed!"
    echo ""
    local error_msg=$(echo "$response" | jq -r '.errors[0].message // "Unknown error"')
    local error_code=$(echo "$response" | jq -r '.errors[0].code // "N/A"')
    echo "  Error Code: $error_code"
    echo "  Error Message: $error_msg"
    echo ""
    log_info "Please check your Cloudflare credentials in $CREDS_FILE"
    exit 1
  fi
}

main "$@"
