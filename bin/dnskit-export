#!/bin/bash
# dnskit-export - Export DNS records to dnscontrol format

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "${SCRIPT_DIR}/../lib/common.sh"
source "${SCRIPT_DIR}/../lib/cloudflare.sh"

show_usage() {
  cat << EOF
Usage: dnskit export <domain> [options]

Export DNS records from Cloudflare in dnscontrol format.
This creates a dnsconfig.js file that you can edit and apply.

Arguments:
  domain      Domain name to export

Options:
  -o, --output <file>     Output file (default: config/dnsconfig.js)
  -a, --append            Append to existing file instead of overwriting
  -h, --help              Show this help message

Examples:
  dnskit export example.com
  dnskit export example.com -o my-dns.js
  dnskit export example.com -a  # Append to existing config
EOF
}

# Convert Cloudflare DNS record to dnscontrol format
convert_record() {
  local type=$1
  local name=$2
  local content=$3
  local priority=$4
  local ttl=$5
  local proxied=$6

  # Remove domain suffix from name to get subdomain
  local subdomain="${name%.$domain}"
  [ "$subdomain" == "$domain" ] && subdomain="@"

  case $type in
    A|AAAA)
      if [ "$proxied" == "true" ]; then
        echo "  $type(\"$subdomain\", \"$content\", CF_PROXY_ON),"
      else
        echo "  $type(\"$subdomain\", \"$content\"),"
      fi
      ;;
    CNAME)
      if [ "$proxied" == "true" ]; then
        echo "  CNAME(\"$subdomain\", \"$content\", CF_PROXY_ON),"
      else
        echo "  CNAME(\"$subdomain\", \"$content\"),"
      fi
      ;;
    MX)
      echo "  MX(\"$subdomain\", $priority, \"$content\"),"
      ;;
    TXT)
      # Escape quotes in TXT records
      content=$(echo "$content" | sed 's/"/\\"/g')
      echo "  TXT(\"$subdomain\", \"$content\"),"
      ;;
    NS)
      echo "  NS(\"$subdomain\", \"$content\"),"
      ;;
    SRV)
      # SRV format needs special handling
      echo "  // SRV: $name -> $content (priority: $priority)"
      ;;
    CAA)
      # CAA format needs special handling
      echo "  // CAA: $name -> $content"
      ;;
    *)
      echo "  // $type record: $name -> $content"
      ;;
  esac
}

main() {
  local domain=""
  local output_file="config/dnsconfig.js"
  local append=false

  # Parse arguments
  while [[ $# -gt 0 ]]; do
    case $1 in
      -o|--output)
        output_file="$2"
        shift 2
        ;;
      -a|--append)
        append=true
        shift
        ;;
      -h|--help)
        show_usage
        exit 0
        ;;
      *)
        if [ -z "$domain" ]; then
          domain="$1"
          shift
        else
          log_error "Unknown option: $1"
          show_usage
          exit 1
        fi
        ;;
    esac
  done

  if [ -z "$domain" ]; then
    log_error "Domain name is required"
    show_usage
    exit 1
  fi

  check_credentials

  log_info "Fetching DNS records for $domain..."

  # Fetch records
  local zone_id=$(get_zone_id "$domain")
  if [ -z "$zone_id" ] || [ "$zone_id" == "null" ]; then
    log_error "Zone not found for domain: $domain"
    return 1
  fi

  local records=$(fetch_dns_records "$zone_id")

  # Check if fetch was successful
  local success=$(echo "$records" | jq -r '.success')
  if [ "$success" != "true" ]; then
    log_error "Failed to fetch DNS records"
    echo "$records" | jq .
    return 1
  fi

  # Generate dnscontrol configuration
  local config_content=""

  if [ "$append" = false ]; then
    # Add header for new file
    config_content+="// DNS Configuration for $domain\n"
    config_content+="// Generated by dnskit on $(date)\n"
    config_content+="// Edit this file and run 'dnskit preview' to see changes\n\n"
    config_content+="var REG_NONE = NewRegistrar(\"none\");\n"
    config_content+="var DSP_CLOUDFLARE = NewDnsProvider(\"cloudflare\");\n\n"
  else
    config_content+="\n// Added $domain on $(date)\n"
  fi

  config_content+="D(\"$domain\", REG_NONE, DnsProvider(DSP_CLOUDFLARE),\n"

  # Process each record
  local record_count=$(echo "$records" | jq '.result | length')
  log_info "Found $record_count DNS records"

  for i in $(seq 0 $((record_count - 1))); do
    local record=$(echo "$records" | jq -r ".result[$i]")
    local type=$(echo "$record" | jq -r '.type')
    local name=$(echo "$record" | jq -r '.name')
    local content=$(echo "$record" | jq -r '.content')
    local priority=$(echo "$record" | jq -r '.priority // 0')
    local ttl=$(echo "$record" | jq -r '.ttl')
    local proxied=$(echo "$record" | jq -r '.proxied // false')

    local line=$(convert_record "$type" "$name" "$content" "$priority" "$ttl" "$proxied")
    config_content+="$line\n"
  done

  # Remove last comma and close
  config_content="${config_content%,\\n}\n"
  config_content+="\n);\n"

  # Write to file
  if [ "$append" = true ] && [ -f "$output_file" ]; then
    echo -e "$config_content" >> "$output_file"
    log_success "DNS configuration appended to $output_file"
  else
    echo -e "$config_content" > "$output_file"
    log_success "DNS configuration exported to $output_file"
  fi

  log_info "Next steps:"
  echo "  1. Review the configuration: cat $output_file"
  echo "  2. Edit if needed: vim $output_file"
  echo "  3. Validate: dnskit validate"
  echo "  4. Preview changes: dnskit preview"
  echo "  5. Apply changes: dnskit apply"
}

main "$@"
